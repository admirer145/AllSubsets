Iterative solution to find all subsets of an array:

Let say if array size is 'n' then there are 2^n subsets possible, simple math.

Or let us take an example, if array size is 3 and array is {3, 4, 1} then total subsets are

{ {}, {3}, {4}, {1}, {3,4}, {3,1}, {4,1}, {3,4,1} } [so total subsets are 2^3 = 8]

Algorithmic steps:

1. Iterate from 1 to 2^n - 1 as 'num'
2. If there is set bit in 'num' at any position j(from right) then take j'th index array(arr) in that subset


IMPLEMENTATION

vector<vector<int>> getTotalSubsets(int n, vector<int> arr)
{

    int high = pow(2, n) ;  // Pre-Calculate power so that it will not calculate again and again in for loop while condition checking
    
    vector<vector<int>> TotalSubset;    // It contains total subsets
    
    for(int num=1; num<high; num++) // I am not taking empty subset
    {
        vector<int> subset; // It contains single subset
        
        for(int j=0; j<n; j++)  // At most num has n bits, so iterating through each
        {
            if(num&(1<<j))    // Checking if jth bit(from right) of num is set or not
            {
                subset.push_back(arr[j]);   // if j'th bit is set then put that j'th index array in subset
            }
        }
        
        TotalSubset.push_back(subset);  // add subset
    }
    
    return TotalSubset
}

Time Complexity: O(n*(2^n))
Space Complexity: O(n*(2^n))